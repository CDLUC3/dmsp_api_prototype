AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'DMP-ID DynamoTable Stream function that updates the Dynamo INdexing table'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  DebugLevel:
    Type: 'String'
    Default: 'debug'

  DomainName:
    Type: 'String'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

  IndexerRoleArn:
    Type: 'String'

  BaselineLayerId:
    Type: 'String'

  DynamoTableName:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  SnsTopicEmailArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

Conditions:
  IsDev:
    !Equals [!Ref Env, 'dev']

Resources:
  # Lambda responsible for communications with EZID
  Function:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './'
      Handler: 'app.Functions::EzidPublisher.process'
      Runtime: 'ruby3.2'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref BaselineLayerId
      Role: !Ref IndexerRoleArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          API_BASE_URL: !Sub 'https://api.${DomainName}'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsTopicEmailArn
          EVENT_BUS_NAME: !Ref EventBusArn
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        EzidPublishEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["EZID update"],
                "detail": {
                  "SK": ["VERSION#latest"]
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref Function
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - Function
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Function}"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  FunctionId:
    Value: !Ref Function

  FunctionArn:
    Value: !GetAtt Function.Arn

  LogGroupId:
    Value: !Ref LogGroup

  LogGroupArn:
    Value: !GetAtt LogGroup.Arn
