AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: >
  dmp-hub-sam

  Sample SAM Template for dmp-hub-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: 'Active'

Parameters:
  HostedZoneId:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  NodeEnv:
    Type: 'String'
    Default: 'development'

  DebugLevel:
    Type: 'String'
    Default: 'error'
    AllowedValues:
      - 'error'
      - 'info'
      - 'debug'

  ApiLayerId:
    Type: 'String'

  DMPToolCloudFormationLayerArn:
    Type: 'String'

  DMPToolCognitoLayerArn:
    Type: 'String'

  DMPToolDatabaseLayerArn:
    Type: 'String'

  DMPToolLoggerLayerArn:
    Type: 'String'

  DMPToolS3LayerArn:
    Type: 'String'

  CognitoUserPoolExportName:
    Type: 'String'

  S3FileExchangeBucketExportName:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  CognitoUserPoolArn:
    Type: 'String'

  UserPoolId:
    Type: 'String'

  DomainName:
    Type: 'String'

  DynamoTableArn:
    Type: 'String'

  DynamoTableName:
    Type: 'String'

  DynamoIndexTableName:
    Type: 'String'

  DynamoPolicyArn:
    Type: 'String'

  S3CloudFrontBucketArn:
    Type: 'String'

  S3PrivateBucketId:
    Type: 'String'

  S3FileExchangeBucketArn:
    Type: 'String'

  S3FileExchangeBucketId:
    Type: 'String'

  SnsEmailTopicArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

  CacheSizeGb:
    Type: 'String'
    Default: '0.5'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

Conditions:
  IsDev:
    !Equals [!Ref Env, 'dev']

Resources:
  # -----------------------------------------------------------
  # SSM Parameter used to toggle lambda debug mode
  # -----------------------------------------------------------
  # Places all lambdas into debug mode which means that the CloudWatch logs will become verbose
  DebugParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Lambda Debug on/off flag"
      Name: !Sub "/uc3/dmp/hub/${Env}/Debug"
      Type: 'String'
      Value: 'false'

  # ----------------------------------------------------
  # Managed IAM Policies for DMPHub resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
  # ----------------------------------------------------
  DmpHubDynamoTableReadPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Read access to the DynamoDB Table'
      ManagedPolicyName: !Sub 'DmpHub${Env}DynamoReadPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:Describe*'
            - 'dynamodb:List*'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:PartiQLSelect'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  DmpHubDynamoTableWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Write access (and GetItem) to the DynamoDB Table'
      ManagedPolicyName: !Sub 'DmpHub${Env}DynamoWritePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:PartiQLInsert'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  EventBusPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the EventBus'
      ManagedPolicyName: !Sub 'DmpHub${Env}EventBusPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'events:PutEvents'
          Resource: !Ref EventBusArn

  CognitoPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the Cognito User Pool Client'
      ManagedPolicyName: !Sub 'DmpHub${Env}CognitoPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'cognito-idp:DescribeUserPoolClient'
          Resource: !Ref CognitoUserPoolArn

  S3BucketPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the S3 Bucket'
      ManagedPolicyName: !Sub 'DmpHub${Env}S3Policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 's3:DeleteObject'
            - 's3:GetObject'
            - 's3:GetObjectAttributes'
            - 's3:GetObjectTagging'
            - 's3:ListBucket'
            - 's3:PutObject'
            - 's3-object-lambda:*'
          Resource:
            - !Ref S3CloudFrontBucketArn
            - !Sub "${S3CloudFrontBucketArn}/*"

  S3FileExchangeBucketPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the S3 FileExchange Bucket'
      ManagedPolicyName: !Sub 'DmpHub${Env}S3ExchangePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - "s3:Get*"
            - "s3:GetObject"
            - "s3:List*"
            - "s3:Describe*"
            - "s3:PutObject"
          Resource:
            - !Ref S3FileExchangeBucketArn
            - !Sub "${S3FileExchangeBucketArn}/*"

  CloudFormationPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the CloudFormation exports'
      ManagedPolicyName: !Sub 'DmpHub${Env}CFExportsPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - "cloudformation:Describe*"
            - "cloudformation:List*"
          Resource: '*'

  # ----------------------------------------------------
  # CloudWatch LogGroup
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Logs.html
  # ----------------------------------------------------
  ApiAccessLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # API Definition
  #  see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  # ----------------------------------------------------
  DmpHubRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","xrayTraceId":"$context.xrayTraceId","status":$context.status,"responseLatency":$context.responseLatency,"responseLength":"$context.responseLength","integrationRequestId":"$context.integration.requestId","integrationResponseStatus":"$context.integration.status","integrationLatency": "$context.integration.latency","ip": "$context.identity.sourceIp","userAgent": "$context.identity.userAgent","cognitoUser": "$context.identity.cognitoIdentityId"}'

      # Cache @ 0.5GB is $0.02 per hour -> $0.48 per day -> roughly $15 per month
      CacheClusterEnabled: !If
        - IsDev
        - false
        - true
      CacheClusterSize: !Ref CacheSizeGb

      # Values here need to be wrapped in single quotes, but the ENV variables passed into the
      # Lambdas do not! For example, "'GET,PUT'" defined here should be "GET, PUT" when passed
      # into the Lambdas as an ENV!
      Cors:
        AllowHeaders: !Sub "'*'"
        AllowMethods: "'GET, PUT, POST, DELETE, OPTIONS'"
        AllowOrigin: !If
        - IsDev
        - "'*'"
        - !Sub "'https://${DomainName}'"

      DisableExecuteApiEndpoint: true
      Domain:
        DomainName: !Sub "api.${DomainName}"
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: 'EDGE'
        NormalizeBasePath: true
        Route53:
          EvaluateTargetHealth: true
          HostedZoneId: !Ref HostedZoneId
          BasePath:
            - /
      StageName: 'v0'
      OpenApiVersion: '3.0.1'
      TracingEnabled: true
      BinaryMediaTypes:
        - 'application/pdf'
        - 'multipart/form-data'
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          DmpHubCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
            AuthType: 'COGNITO_USER_POOLS'
            Identity:
              Header: 'Authorization'
            AuthorizationScopes:
              - !Sub 'https://auth.${DomainName}/${Env}.delete'
              - !Sub 'https://auth.${DomainName}/${Env}.read'
              - !Sub 'https://auth.${DomainName}/${Env}.upload'
              - !Sub 'https:/auth.${DomainName}/${Env}.write'
              - !Sub 'https:/auth.${DomainName}/${Env}.data-transfer'
        DefaultAuthorizer: DmpHubCognitoAuthorizer

  # TODO: Add the actual API domain name to SSM so it can be referenced in the Lambdas!
  #       figure out how to pass in the Env!
  # Add the API domain name to SSM so that our Lambdas can build pagination links
  ApiBaseUrlParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "DMPHub-${Env} API Base Domain"
      Name: !Sub "/uc3/dmp/hub/${Env}/ApiBaseUrl"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Sub "https://api.${DomainName}"

  # ----------------------------------------------------
  # API Lambdas
  #  See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
  # ----------------------------------------------------

  # Tombstone a DMP
  DeleteDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'delete_dmp/'
      Handler: 'app.Functions::DeleteDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        DeleteDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'delete'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.delete'

  DeleteDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the Crossref Grant registry
  GetAwardsCrossrefApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_awards_crossref/'
      Handler: 'app.Functions::GetAwardsCrossref.process'
      Runtime: 'ruby3.2'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: 'debug' # !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsCrossref:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/crossref/{funder_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsCrossrefLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsCrossrefApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the NIH Award API
  GetAwardsNihApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_awards_nih/'
      Handler: 'app.Functions::GetAwardsNih.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsNih:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/nih'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsNihLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsNihApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the NSF Awards API
  GetAwardsNsfApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_awards_nsf/'
      Handler: 'app.Functions::GetAwardsNsf.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsNsf:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/nsf'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsNsfLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsNsfApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Search for DMP IDs
  GetDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_dmps'
      Handler: 'app.Functions::GetDmps.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
        - !Ref DynamoPolicyArn
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          DYNAMO_INDEX_TABLE: !Ref DynamoIndexTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmps:
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetDmpsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Fetch the specified DMP ID
  GetDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_dmp/'
      Handler: 'app.Functions::GetDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - !Ref DmpHubDynamoTableReadPolicy
        - !Ref S3BucketPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DMP_ID_BASE_URL: 'doi.org'
          DYNAMO_TABLE: !Ref DynamoTableName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'NONE'

  GetDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Get DMP metadata files
  GetDownloadsDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_dmps_downloads/dist/'
      Handler: 'index.handler'
      Runtime: 'nodejs20.x'
      Timeout: 30
      Architectures:
        - 'arm64'
      Layers:
        - !Ref DMPToolCloudFormationLayerArn
        - !Ref DMPToolCognitoLayerArn
        - !Ref DMPToolLoggerLayerArn
        - !Ref DMPToolS3LayerArn
      Policies:
        - !Ref S3FileExchangeBucketPolicy
        - !Ref CognitoPolicy
        - !Ref CloudFormationPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LOG_LEVEL: 'debug'
          NODE_ENV: !Ref NodeEnv
          COGNITO_USER_POOL_EXP_NAME: !Ref CognitoUserPoolExportName
          S3_BUCKET_EXP_NAME: !Ref S3FileExchangeBucketExportName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDownloadsDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/downloads'
            Method: 'get'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.data-transfer'
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: false

  GetDownloadsDmps:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetDownloadsDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Get Citations for the DOIs
  PostCitationsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'post_citations/'
      Handler: 'app.Functions::PostCitations.process'
      Runtime: 'ruby3.2'
      Timeout: 60
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: 'debug' # !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostCitations:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/citations'
            Method: 'post'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  PostCitationsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostCitationsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Register a new DMP ID
  PostDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'post_dmps/'
      Handler: 'app.Functions::PostDmps.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps'
            Method: 'post'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PostDmpsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Upload a PDF narrative document and attach it to the specified DMP ID
  PostNarrativesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'post_narratives/'
      Handler: 'app.Functions::PostNarratives.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
        - !Ref DmpHubDynamoTableWritePolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          S3_BUCKET: !Ref S3CloudFrontBucketArn
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostNarratives:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/narratives'
            Method: 'post'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PostNarrativesLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostNarrativesFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Update a DMP ID
  PutDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'put_dmp/'
      Handler: 'app.Functions::PutDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PutDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'put'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PutDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PutDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Get DMP metadata files
  PutUploadsDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'put_dmps_uploads/dist/'
      Handler: 'index.handler'
      Runtime: 'nodejs20.x'
      Timeout: 30
      Architectures:
        - 'arm64'
      Layers:
        - !Ref DMPToolCloudFormationLayerArn
        - !Ref DMPToolCognitoLayerArn
        - !Ref DMPToolLoggerLayerArn
        - !Ref DMPToolS3LayerArn
      Policies:
        - !Ref S3FileExchangeBucketPolicy
        - !Ref CognitoPolicy
        - !Ref CloudFormationPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LOG_LEVEL: 'debug'
          NODE_ENV: !Ref NodeEnv
          COGNITO_USER_POOL_EXP_NAME: !Ref CognitoUserPoolExportName
          S3_BUCKET_EXP_NAME: !Ref S3FileExchangeBucketExportName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PutUploadsDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/uploads'
            Method: 'put'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.data-transfer'
    Metadata:
      BuildMethod: 'esbuild'
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: false

  PutUploadsDmps:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PutUploadsDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  ValidateDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'validate_dmp/'
      Handler: 'app.Functions::ValidateDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref ApiLayerId
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        ValidateDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/validate'
            Method: 'post'
            Auth:
              Authorizer: 'NONE'

  ValidateLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ValidateDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Scheduled events to keep some of the API lambdas warm
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  LambdaDmpWarmerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(10 minutes)'
      Targets:
        - Id: !Ref GetDmpFunction
          Arn: !GetAtt GetDmpFunction.Arn
        - Id: !Ref GetDmpsFunction
          Arn: !GetAtt GetDmpsFunction.Arn
        - Id: !Ref ValidateDmpFunction
          Arn: !GetAtt ValidateDmpFunction.Arn

  # Lambda Permissions to allow the pre-warmer scheduled event to invoke the API Lambdas
  ValidateDmpWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ValidateDmpFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  # Warmer for the Awards API Lambdas
  LambdaAwardWarmerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(10 minutes)'
      Targets:
        - Id: !Ref GetAwardsCrossrefApiFunction
          Arn: !GetAtt GetAwardsCrossrefApiFunction.Arn
        - Id: !Ref GetAwardsNihApiFunction
          Arn: !GetAtt GetAwardsNihApiFunction.Arn
        - Id: !Ref GetAwardsNsfApiFunction
          Arn: !GetAtt GetAwardsNsfApiFunction.Arn

  # Lambda Permissions to allow the pre-warmer scheduled event to invoke the API Lambdas
  GetAwardsCrossrefWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsCrossrefApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

  GetAwardsNihWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsNihApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

  GetAwardsNsfWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsNsfApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

Outputs:
  DmpHubDynamoTableReadPolicyArn:
    Value: !Ref DmpHubDynamoTableReadPolicy
  DmpHubDynamoTableWritePolicyArn:
    Value: !Ref DmpHubDynamoTableWritePolicy
  S3BucketPolicyArn:
    Value: !Ref S3BucketPolicy

  DmpHubRestApiId:
    Value: !Ref DmpHubRestApi

  DeleteDmpFunctionArn:
    Value: !GetAtt DeleteDmpFunction.Arn
  GetDmpFunctionArn:
    Value: !GetAtt GetDmpFunction.Arn
  GetDmpsFunctionArn:
    Value: !GetAtt GetDmpsFunction.Arn
  PostDmpsFunctionArn:
    Value: !GetAtt PostDmpsFunction.Arn
  PutDmpFunctionArn:
    Value: !GetAtt PutDmpFunction.Arn
  ValidateDmpFunctionArn:
    Value: !GetAtt ValidateDmpFunction.Arn

  GetAwardsCrossrefFunctionArn:
    Value: !GetAtt GetAwardsCrossrefApiFunction.Arn
  GetAwardsNihunctionArn:
    Value: !GetAtt GetAwardsNihApiFunction.Arn
  GetAwardsNsfFunctionArn:
    Value: !GetAtt GetAwardsNsfApiFunction.Arn

  PostCitationsFunctionArn:
    Value: !GetAtt PostCitationsFunction.Arn
  PostNarrativeFunctionArn:
    Value: !GetAtt PostNarrativesFunction.Arn

  GetDownloadsDmpsFunctionArn:
    Value: !GetAtt GetDownloadsDmpsFunction.Arn
  PutUploadsDmpsFunctionArn:
    Value: !GetAtt PutUploadsDmpsFunction.Arn

  ApiBaseUrl:
    Value: !Sub "https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/"