AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: >
  dmp-tool-sam

  Sample SAM Template for dmp-tool-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: 'Active'

Parameters:
  HostedZoneId:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  DebugLevel:
    Type: 'String'
    Default: 'error'
    AllowedValues:
      - 'error'
      - 'info'
      - 'debug'

  ApiLayerId:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  CognitoUserPoolArn:
    Type: 'String'

  DomainName:
    Type: 'String'

  DynamoTableArn:
    Type: 'String'

  DynamoTableName:
    Type: 'String'

  DynamoIndexTableName:
    Type: 'String'

  DynamoExternalDataTableName:
    Type: 'String'

  DmptoolApiRoleArn:
    Type: 'String'

  S3CloudFrontBucketArn:
    Type: 'String'

  S3PrivateBucketId:
    Type: 'String'

  SnsEmailTopicArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

  CacheSizeGb:
    Type: 'String'
    Default: '0.5'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

Conditions:
  IsDev:
    !Equals [!Ref Env, 'dev']

Resources:
  # -----------------------------------------------------------
  # SSM Parameter used to toggle lambda debug mode
  # -----------------------------------------------------------
  # Places all lambdas into debug mode which means that the CloudWatch logs will become verbose
  DebugParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Lambda Debug on/off flag"
      Name: !Sub "/uc3/dmp/tool/${Env}/Debug"
      Type: 'String'
      Value: 'false'

  # ----------------------------------------------------
  # CloudWatch LogGroup
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Logs.html
  # ----------------------------------------------------
  ApiAccessLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # API Definition
  #  see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  # ----------------------------------------------------
  DmptoolRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","xrayTraceId":"$context.xrayTraceId","status":$context.status,"responseLatency":$context.responseLatency,"responseLength":"$context.responseLength","integrationRequestId":"$context.integration.requestId","integrationResponseStatus":"$context.integration.status","integrationLatency": "$context.integration.latency","ip": "$context.identity.sourceIp","userAgent": "$context.identity.userAgent","cognitoUser": "$context.identity.cognitoIdentityId"}'

      # Cache @ 0.5GB is $0.02 per hour -> $0.48 per day -> roughly $15 per month
      CacheClusterEnabled: !If
        - IsDev
        - false
        - true
      CacheClusterSize: !Ref CacheSizeGb

      # Values here need to be wrapped in single quotes, but the ENV variables passed into the
      # Lambdas do not! For example, "'GET,PUT'" defined here should be "GET, PUT" when passed
      # into the Lambdas as an ENV!
      Cors:
        AllowHeaders: !Sub "'*'"
        AllowMethods: "'GET, PUT, POST, DELETE, OPTIONS'"
        AllowOrigin: !If
        - IsDev
        - "'*'"
        - !Sub "'https://${DomainName}'"

      DisableExecuteApiEndpoint: true
      Domain:
        DomainName: !Sub "dmptool-api.${DomainName}"
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: 'EDGE'
        NormalizeBasePath: true
        Route53:
          EvaluateTargetHealth: true
          HostedZoneId: !Ref HostedZoneId
          BasePath:
            - /
      StageName: 'v0'
      OpenApiVersion: '3.0.1'
      TracingEnabled: true
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          DmpHubCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
            AuthType: 'COGNITO_USER_POOLS'
            Identity:
              Header: 'Authorization'
            AuthorizationScopes:
              - !Sub 'https://auth.${DomainName}/${Env}.delete'
              - !Sub 'https://auth.${DomainName}/${Env}.read'
              - !Sub 'https://auth.${DomainName}/${Env}.upload'
              - !Sub 'https:/auth.${DomainName}/${Env}.write'
        DefaultAuthorizer: DmpHubCognitoAuthorizer

  # TODO: Add the actual API domain name to SSM so it can be referenced in the Lambdas!
  #       figure out how to pass in the Env!
  # Add the API domain name to SSM so that our Lambdas can build pagination links
  ApiBaseUrlParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "DMPTool-${Env} API Base Domain"
      Name: !Sub "/uc3/dmp/tool/${Env}/ApiBaseUrl"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Sub "https://dmptool-api.${DomainName}"

  # ----------------------------------------------------
  # API Lambdas
  #  See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
  # ----------------------------------------------------
  GetAffiliationsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_affiliations/'
      Handler: 'app.Functions::GetAffiliations.process'
      Runtime: 'nodejs20.x'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Role:
        - DmptoolApiRoleArn
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          DYNAMO_INDEX_TABLE: !Ref DynamoIndexTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmps:
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmptoolRestApi
            Path: '/affiliations'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAffiliationsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAffiliationsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Fetch the specified DMP ID
  GetAffiliationFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'get_affiliation/'
      Handler: 'app.Functions::GetAffiliation.process'
      Runtime: 'nodejs20.x'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Role:
        - DmptoolApiRoleArn
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DYNAMO_TABLE: !Ref DynamoExternalDataTableName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmptoolRestApi
            Path: '/affiliations/{affiliation_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'NONE'

  GetAffiliationLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAffiliationFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Scheduled events to keep some of the API lambdas warm
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  LambdaAffiliationWarmerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(10 minutes)'
      Targets:
        - Id: !Ref GetAffiliationFunction
          Arn: !GetAtt GetAffiliationFunction.Arn
        - Id: !Ref GetAffiliationsFunction
          Arn: !GetAtt GetAffiliationsFunction.Arn

Outputs:
  DmpHubDynamoTableReadPolicyArn:
    Value: !Ref DmpHubDynamoTableReadPolicy
  DmpHubDynamoTableWritePolicyArn:
    Value: !Ref DmpHubDynamoTableWritePolicy
  S3BucketPolicyArn:
    Value: !Ref S3BucketPolicy

  DmpHubRestApiId:
    Value: !Ref DmpHubRestApi

  DeleteDmpFunctionArn:
    Value: !GetAtt DeleteDmpFunction.Arn
  GetDmpFunctionArn:
    Value: !GetAtt GetDmpFunction.Arn
  GetDmpsFunctionArn:
    Value: !GetAtt GetDmpsFunction.Arn
  PostDmpsFunctionArn:
    Value: !GetAtt PostDmpsFunction.Arn
  PutDmpFunctionArn:
    Value: !GetAtt PutDmpFunction.Arn
  ValidateDmpFunctionArn:
    Value: !GetAtt ValidateDmpFunction.Arn

  GetAwardsCrossrefFunctionArn:
    Value: !GetAtt GetAwardsCrossrefApiFunction.Arn
  GetAwardsNihunctionArn:
    Value: !GetAtt GetAwardsNihApiFunction.Arn
  GetAwardsNsfFunctionArn:
    Value: !GetAtt GetAwardsNsfApiFunction.Arn

  PostCitationsFunctionArn:
    Value: !GetAtt PostCitationsFunction.Arn
  PostNarrativeFunctionArn:
    Value: !GetAtt PostNarrativesFunction.Arn

  ApiBaseUrl:
    Value: !Sub "https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/"