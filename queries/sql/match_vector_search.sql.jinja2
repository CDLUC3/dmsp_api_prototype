CREATE TEMP FUNCTION calculate_vector_weighted_count(
  weighted_count FLOAT64,
  norm_distance FLOAT64
) RETURNS FLOAT64 AS (
  weighted_count + COALESCE(norm_distance, 0) * 5
);

CREATE OR REPLACE TABLE `{{ output_table_id }}` AS
WITH distances AS (
  SELECT DISTINCT dmp_doi, dataset_doi, distance, {{ dataset_id }}.min_max_norm(distance, min_distance, max_distance) AS norm_distance
  FROM (
      SELECT
        query.doi AS dmp_doi,
        base.doi AS dataset_doi,
        distance,
        MIN(distance) OVER () AS min_distance,
        MAX(distance) OVER () AS max_distance
      FROM VECTOR_SEARCH(
        (SELECT * FROM `{{ dataset_embeddings_table_id }}`),
        'ml_generate_embedding_result',
        (SELECT * FROM `{{ dmps_embeddings_table_id }}`),
        top_k =>-1,
        distance_type => 'EUCLIDEAN',
        options => '{"use_brute_force":true}'
      )
  )
  ORDER BY dmp_doi, distance DESC
)

SELECT
  matches.dmp_doi AS doi,
  dmps.project_start,
  dmps.project_end,
  CONCAT(dmps.title, ' ', dmps.abstract) AS content,
  ARRAY_TO_STRING(dmps.people, ', ') AS people,
  ARRAY_AGG(
    STRUCT(
      match.dataset_doi AS doi,
      CONCAT(dataset.title, ' ', dataset.abstract) AS content,
      ARRAY_TO_STRING(dataset.people, ', ') AS people,
      dataset.type,
      dataset.publication_date,
      match.grant_id_count,
      match.funder_opportunity_id_count,
      match.person_id_count,
      match.funder_id_count,
      affiliation_id_count,
      match.person_name_count,
      match.funder_name_count,
      match.affiliation_name_count,
      match.weighted_count,
      calculate_vector_weighted_count(match.weighted_count, distances.norm_distance) AS vector_weighted_count,
      distances.distance,
      distances.norm_distance
    )
    ORDER BY calculate_vector_weighted_count(match.weighted_count, distances.norm_distance) DESC
  ) AS matches
FROM `{{ match_intermediate_table_id }}` AS matches, UNNEST(matches.matches) AS match
LEFT JOIN distances ON distances.dmp_doi = matches.dmp_doi AND distances.dataset_doi = match.dataset_doi
LEFT JOIN `{{ dataset_table_id }}` AS dataset ON dataset.doi = match.dataset_doi
LEFT JOIN `{{ dmps_norm_table_id }}` AS dmps ON dmps.doi = matches.dmp_doi
GROUP BY doi, dmps.project_start, dmps.project_end, content, people
