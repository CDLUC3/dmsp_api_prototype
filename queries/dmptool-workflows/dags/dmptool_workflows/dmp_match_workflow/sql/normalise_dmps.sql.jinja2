CREATE TEMP FUNCTION extract_grant_id(input_string STRING)
RETURNS STRING
LANGUAGE js AS """
  function extractGrantId(input_string) {
    // Check if the string contains a URL
    if(input_string.match(/https?:\\/\\//i)) {
      // From more specific to general

      // https://www.nsf.gov/awardsearch/showAward?AWD_ID=2234213&HistoricalAwards=false
      let match = input_string.match(/AWD_ID=([0-9]+)/);
      if(match){
        // Return second group
        return match[1];
      }

      // https://www.nsf.gov/pubs/2023/nsf23579/nsf23579.html
      match = input_string.match(/nsf[0-9]+(-[0-9]+)*/);
      if(match){
        return match[0];
      }

      // https://www.moore.org/grant-detail?grantId=GBMF1619
      match = input_string.match(/grantId=(GBMF[0-9]+)/);
      if(match){
        // Return second group
        return match[1];
      }

      // https://www.grants.gov/web/grants/view-opportunity.html?oppId=345796
      match = input_string.match(/oppId=([0-9]+)/);
      if(match){
        // Return second group
        return match[1];
      }

      // https://grants.nih.gov/grants/guide/rfa-files/RFA-OD-23-017.html
      // https://grants.nih.gov/grants/guide/rfa-files/RFA-TR-22-030.html
      // https://grants.nih.gov/grants/guide/rfa-files/RFA-MH-25-140.html
      // https://grants.nih.gov/grants/guide/pa-files/PAR-24-035.html
      // https://grants.nih.gov/grants/guide/pa-files/PA-20-188.html
      if (input_string.match(/https?:\\/\\/grants.nih.gov/i)) {
        match = input_string.match(/[a-zA-Z]+(-[a-zA-Z]+)*-[0-9]+(-[0-9]+)*/);
        if(match){
          return match[0];
        }
      }

      // 2021/03601-1/https://bv.fapesp.br/pt/pesquisador/713585/elias-de-franca/
      match = input_string.match(/[0-9]{4}\\/[0-9]{5}-[0-9]{1}/);
      if(match){
        return match[0];
      }

      // ARC Grant ID
      // https://dataportal.arc.gov.au/NCGP/Web/Grant/Grant/DP240100968
      // https://dataportal.arc.gov.au/NCGP/Web/Grant/Grant/FT220100024
      match = input_string.match(/[A-Z]{2}[0-9]{9}/);
      if(match){
        return match[0];
      }

      // Any other
      // https://cdmrp.health.mil/funding/pa/HT942524PRMRPDA-GG.pdf (Funding Opportunity Number)
      // https://cdmrp.health.mil/funding/pa/HT942524BCRPBTA12-GG.pdf (Funding Opportunity Number)
      // https://www.nifa.usda.gov/sites/default/files/2023-07/FY23-AFRI-FAS-RFA-MOD2.pdf	2023
      // https://www.nifa.usda.gov/sites/default/files/2023-12/FY24-CPPM-RFA-P-MOD1.pdf	2023
      // https://www.nre.navy.mil/assets/2022-09/N00014-23-S-B001.pdf
      // https://science.osti.gov/grants/Lab-Announcements/-/media/grants/pdf/lab-announcements/2022/LAB_22-2580.pdf
      match = input_string.match(/[A-Z0-9-_]{8,}/);
      if(match){
        return match[0];
      }

      // Any number 5 or more digits
      match = input_string.match(/\\d{5,}/);
      if(match){
        return match[0];
      }

      return input_string;
    }

    // 2018/00381-8; 2021/08773-5	2018/00381-8; 2021/08773-5
    match = input_string.match(/[0-9]{4}\\/[0-9]{5}-[0-9]{1}/);
    if(match){
      return match[0];
    }

    return input_string;
  };

  // If input string is null then return
  if(input_string == null){
    return null;
  }

  // Extract grant id
  let grantId = extractGrantId(input_string);
  grantId = grantId.trim().toLowerCase();
  if(grantId === ""){
    return null;
  }

  return grantId;
""";

CREATE TEMP FUNCTION remove_empty_strings(name STRING)
RETURNS STRING
LANGUAGE js
AS  r"""
  if (name == null){
    return null;
  }

  // If empty string return null
  name = name.trim().toLowerCase();
  if (name === "") {
    return null;
  }

  return name;
""";

CREATE OR REPLACE TABLE `{{ dmps_norm_table_id }}` AS

WITH fundref_index AS (
  SELECT
    {{ dataset_id }}.extract_ror(id) as ror_id,
    TRIM(fundref_id) as fundref_id
  FROM `{{ ror_table_id }}`, UNNEST(external_ids.Fundref.all) as fundref_id
  WHERE id IS NOT NULL AND fundref_id IS NOT NULL
),

funder_index AS (
  SELECT
    dmp_id,
    ARRAY_AGG(DISTINCT funder_id) AS funder_ids
  FROM (
    -- Collects all IDS specified in DMPs
    SELECT dmp_id, fund.funder.id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funding) AS fund
    WHERE fund.funder.id IS NOT NULL

    UNION ALL

    -- Selects all Fundref IDs that can be matched to ROR IDs from the DMPs
    SELECT dmp_id, fundref_index.fundref_id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funding) AS fund
    LEFT JOIN fundref_index ON fund.funder.id = fundref_index.ror_id
    WHERE fundref_index.fundref_id IS NOT NULL AND fund.funder.id IS NOT NULL

    UNION ALL

    -- Selects all ROR IDs that can be matched to Fundref IDs from the DMPs
    SELECT dmp_id, fundref_index.ror_id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funding) AS fund
    LEFT JOIN fundref_index ON fund.funder.id = fundref_index.fundref_id
    WHERE fundref_index.ror_id IS NOT NULL AND fund.funder.id IS NOT NULL
  )
  GROUP BY dmp_id
),

normalised AS (
  SELECT
    dmps.dmp_id as doi,
    {{ dataset_id }}.create_content(
      title,
      description
    ) AS content,
    project_start,
    project_end,

    (SELECT ARRAY_AGG(remove_empty_strings(affiliation) IGNORE NULLS) FROM UNNEST(dmps.affiliations) AS affiliation) AS affiliations,
    (SELECT ARRAY_AGG(remove_empty_strings(affiliation_id) IGNORE NULLS) FROM UNNEST(dmps.affiliation_ids) AS affiliation_id) AS affiliation_ids,

    (SELECT ARRAY_AGG(remove_empty_strings(fund.funder.name) IGNORE NULLS) FROM UNNEST(dmps.funding) AS fund) AS funders,
    funder_index.funder_ids, -- Add additional Funder IDS from Crossref Fundref list of Funder IDs
    (SELECT ARRAY_AGG(remove_empty_strings(fund.funder_opportunity_id) IGNORE NULLS) FROM UNNEST(dmps.funding) AS fund) AS funder_opportunity_ids,
    (SELECT ARRAY_AGG(extract_grant_id(fund.grant_id) IGNORE NULLS) FROM UNNEST(dmps.funding) AS fund) AS grant_ids,

    -- Contains email addresses and peoples names are a mix of given family and family, given
    (SELECT ARRAY_AGG(remove_empty_strings(person) IGNORE NULLS) FROM UNNEST(dmps.people) AS person) AS people,

    -- Contains email addresses and some ORCIDs have a prefix and others don't e.g. https://orcid.org/0000-0000-0000-0000 and 0000-0000-0000-0000
    (SELECT ARRAY_AGG(remove_empty_strings(people_id) IGNORE NULLS) FROM UNNEST(dmps.people_ids) AS people_id WHERE {{ dataset_id }}.is_orcid(people_id)) AS people_ids,

--    repos,
--    repo_ids,
  FROM `{{ dmps_raw_table_id }}` as dmps
  LEFT JOIN funder_index ON funder_index.dmp_id = dmps.dmp_id
  WHERE dmps.project_start >= DATE(1990, 1, 1) -- TODO: there seem to be some typos for dates, e.g. project with 0024-01-01 for start date
)

SELECT
  doi,
  content,
  project_start,
  project_end,
  ARRAY(SELECT value FROM UNNEST(affiliations) AS value ORDER BY value) AS affiliations,
  affiliation_ids,
  ARRAY(SELECT value FROM UNNEST(funders) AS value ORDER BY value) AS funders,
  funder_ids,
  funder_opportunity_ids,
  grant_ids,
  ARRAY(SELECT value FROM UNNEST(people) AS value ORDER BY value) AS people,
  people_ids
FROM normalised
ORDER BY project_start ASC
