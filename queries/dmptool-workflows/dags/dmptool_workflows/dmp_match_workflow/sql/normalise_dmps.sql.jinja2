CREATE OR REPLACE TABLE `{{ dmps_norm_table_id }}` AS

WITH fundref_index AS (
  SELECT
    {{ dataset_id }}.extract_ror(id) as ror_id,
    TRIM(fundref_id) as fundref_id
  FROM `{{ ror_table_id }}`, UNNEST(external_ids.Fundref.all) as fundref_id
  WHERE id IS NOT NULL AND fundref_id IS NOT NULL
),

funder_index AS (
  SELECT
    dmp_id,
    ARRAY_AGG(DISTINCT funder_id) AS funder_ids
  FROM (
    SELECT dmp_id, funder_id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funder_ids) AS funder_id

    UNION ALL

    SELECT dmp_id, fundref_index.fundref_id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funder_ids) AS funder_id
    LEFT JOIN fundref_index ON funder_id = fundref_index.ror_id
    WHERE fundref_index.fundref_id IS NOT NULL

    UNION ALL

    SELECT dmp_id, fundref_index.ror_id as funder_id
    FROM `{{ dmps_raw_table_id }}` as dmps, UNNEST(dmps.funder_ids) AS funder_id
    LEFT JOIN fundref_index ON funder_id = fundref_index.fundref_id
    WHERE fundref_index.ror_id IS NOT NULL
  )
  GROUP BY dmp_id
),

normalised AS (
  SELECT
    dmps.dmp_id as doi,
    {{ dataset_id }}.create_content(
      title,
      description
    ) AS content,
    project_start,
    project_end,

    affiliations,
    affiliation_ids,

    funders,
    funder_index.funder_ids, -- Add additional Funder IDS from Crossref Fundref list of Funder IDs
    funder_opportunity_ids,

    grant_ids,

    -- Contains email addresses and peoples names are a mix of given family and family, given
    -- TODO: standardise name format (e.g. given + ' ' + family), remove email addresses
    (SELECT ARRAY_AGG(person) FROM UNNEST(dmps.people) AS person WHERE NOT {{ dataset_id }}.is_email(person)) AS people,

    -- Contains email addresses and some ORCIDs have a prefix and others don't e.g. https://orcid.org/0000-0000-0000-0000 and 0000-0000-0000-0000
    -- TODO: standardise ORCID format, remove email addresses
    (SELECT ARRAY_AGG(people_id) FROM UNNEST(dmps.people_ids) AS people_id WHERE {{ dataset_id }}.is_orcid(people_id)) AS people_ids,

--    repos,
--    repo_ids,
  FROM `{{ dmps_raw_table_id }}` as dmps
  LEFT JOIN funder_index ON funder_index.dmp_id = dmps.dmp_id
  WHERE dmps.project_start >= DATE(1990, 1, 1) -- TODO: there seem to be some typos for dates, e.g. project with 0024-01-01 for start date
)

SELECT
  doi,
  content,
  project_start,
  project_end,
  ARRAY(SELECT value FROM UNNEST(affiliations) AS value ORDER BY value) AS affiliations,
  affiliation_ids,
  ARRAY(SELECT value FROM UNNEST(funders) AS value ORDER BY value) AS funders,
  funder_ids,
  funder_opportunity_ids,
  grant_ids,
  ARRAY(SELECT value FROM UNNEST(people) AS value ORDER BY value) AS people,
  people_ids
FROM normalised
ORDER BY project_start ASC
