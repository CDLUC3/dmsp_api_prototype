CREATE OR REPLACE TABLE `{{ match_intermediate_table_id }}` AS

-- TODO:
-- cluster match data on publication date, need to move this field to the top of the table
-- TODO: perhaps do the LIKE match here, where can filter on publication date using clustering
-- TODO: filter out any NULL award ids

-- MATCH AWARD IDS
WITH dmps_award_ids AS (
  SELECT
    dmps.doi,
    project_start,
    project_end,
    award_id
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.award_ids) AS award_id
),

matches_award_ids AS (
  SELECT
    A.doi AS dmp_doi,
    B.doi AS match_doi,
    "award_id" AS entity_type,
    "" AS entity,
    1 AS match_count
  FROM dmps_award_ids AS A
  INNER JOIN `{{ match_norm_table_id }}` AS B
  ON (B.publication_date BETWEEN A.project_start AND A.project_end)
  CROSS JOIN UNNEST(B.match_data.grant_ids) AS award_id
  WHERE A.award_id = award_id OR award_id LIKE CONCAT('%', A.award_id, '%')
  GROUP BY dmp_doi, match_doi, entity_type, entity
),

-- MATCH FUNDED WORKS
dmps_funded_works AS (
  SELECT
    dmps.doi AS dmp_doi,
    project_start,
    project_end,
    funded_work_doi
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(funded_works) AS funded_work_doi
),

matches_funded_works AS (
  SELECT
    A.dmp_doi,
    B.doi AS match_doi,
    "funded_work" AS entity_type,
    "" AS entity,
    1 AS match_count
  FROM dmps_funded_works AS A
  INNER JOIN `{{ match_norm_table_id }}` AS B
  ON (B.publication_date BETWEEN A.project_start AND A.project_end)
  AND A.funded_work_doi = B.doi
  GROUP BY dmp_doi, match_doi, entity_type, entity
),

matches AS (
  SELECT * FROM matches_award_ids
  UNION ALL
  SELECT * FROM matches_funded_works
),

aggregated AS (
  SELECT
    dmp_doi,
    match_doi,
    SUM(CASE WHEN entity_type = 'award_id' THEN match_count ELSE 0 END) AS award_id_count,
    SUM(CASE WHEN entity_type = 'funded_work' THEN match_count ELSE 0 END) AS funded_work_count,
    SUM(CASE WHEN entity_type = 'person_id' THEN match_count ELSE 0 END) AS person_id_count,
    SUM(CASE WHEN entity_type = 'funder_id' THEN match_count ELSE 0 END) AS funder_id_count,
    SUM(CASE WHEN entity_type = 'affiliation_id' THEN match_count ELSE 0 END) AS affiliation_id_count,
    SUM(CASE WHEN entity_type = 'person_name' THEN match_count ELSE 0 END) AS person_name_count,
    SUM(CASE WHEN entity_type = 'funder_name' THEN match_count ELSE 0 END) AS funder_name_count,
    SUM(CASE WHEN entity_type = 'affiliation_name' THEN match_count ELSE 0 END) AS affiliation_name_count,
    SUM(
      IF(entity_type = 'award_id', match_count * 100, 0) +
      IF(entity_type = 'funded_work', match_count * 20, 0) +
      IF(entity_type = 'person_id', match_count * 5, 0) +
      IF(entity_type = 'funder_id', match_count * 1, 0) +
      IF(entity_type = 'affiliation_id', match_count * 1, 0) +
      IF(entity_type = 'person_name', match_count * 5, 0) +
      IF(entity_type = 'funder_name', match_count * 1, 0) +
      IF(entity_type = 'affiliation_name', match_count * 1, 0)
    ) AS weighted_count
  FROM matches
  GROUP BY dmp_doi, match_doi
  ORDER BY dmp_doi, weighted_count DESC
)

SELECT
  dmp_doi,
  ARRAY_AGG(
    STRUCT(
      match_doi,
      award_id_count,
      funded_work_count,
      person_id_count,
      funder_id_count,
      affiliation_id_count,
      person_name_count,
      funder_name_count,
      affiliation_name_count,
      weighted_count
    ) ORDER BY weighted_count DESC LIMIT {{ max_matches }}
  ) AS matches
FROM aggregated
WHERE weighted_count >= {{ weighted_count_threshold }}
GROUP BY dmp_doi
ORDER BY dmp_doi
