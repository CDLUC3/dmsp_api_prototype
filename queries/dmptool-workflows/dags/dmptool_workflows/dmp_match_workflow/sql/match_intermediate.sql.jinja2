CREATE OR REPLACE TABLE `{{ match_intermediate_table_id }}` AS

WITH dmps_unnested_ids AS (
  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'grant_id' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.grant_ids) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'funder_opportunity_id' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.funder_opportunity_ids) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'affiliation_id' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.affiliation_ids) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'funder_id' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.funder_ids) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'person_id' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.people_ids) AS entity
),

dmps_unnested_names AS (
  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'person_name' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.people) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'funder_name' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.funders) AS entity

  UNION ALL

  SELECT
    dmps.doi,
    project_start,
    project_end,
    entity,
    'affiliation_name' AS entity_type
  FROM
    `{{ dmps_norm_table_id }}` AS dmps,
    UNNEST(dmps.affiliations) AS entity
),

match_unnested_ids AS (
  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'grant_id' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.grant_ids) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'funder_opportunity_id' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.grant_ids) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'affiliation_id' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.affiliation_ids) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'funder_id' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.funder_ids) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'person_id' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.people_ids) AS entity
),

match_unnested_names AS (
  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'person_name' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.people) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'funder_name' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.funders) AS entity

  UNION ALL

  SELECT
    match.doi,
    match_data.publication_date,
    entity,
    'affiliation_name' AS entity_type
  FROM
    `{{ match_norm_table_id }}` AS match,
    UNNEST(match.match_data.affiliations) AS entity
),

matches_ids AS (
  SELECT
    A.doi AS dmp_doi,
    B.doi AS match_doi,
    A.entity_type AS entity_type,
    A.entity AS entity,
    COUNT(A.entity) AS match_count,
  FROM dmps_unnested_ids AS A
  INNER JOIN match_unnested_ids AS B ON (B.publication_date BETWEEN A.project_start AND A.project_end) AND A.entity_type = B.entity_type AND A.entity = B.entity
  GROUP BY dmp_doi, match_doi, entity_type, entity
),

-- This is separate so can match name based entities in a different way (e.g. with LIKE)
matches_names AS (
  SELECT
    A.doi AS dmp_doi,
    B.doi AS match_doi,
    A.entity_type AS entity_type,
    A.entity,
    COUNT(DISTINCT B.doi) AS match_count,
  FROM dmps_unnested_names AS A
  INNER JOIN match_unnested_names AS B ON (B.publication_date BETWEEN A.project_start AND A.project_end) AND A.entity_type = B.entity_type AND A.entity = B.entity
  -- B.entity LIKE CONCAT('%', A.entity, '%')
  -- Too inefficient on whole match
  GROUP BY dmp_doi, match_doi, entity_type, entity
),

matches AS (
  SELECT * FROM matches_ids UNION ALL SELECT * FROM matches_names
),

aggregated AS (
  SELECT
    dmp_doi,
    match_doi,
    SUM(CASE WHEN entity_type = 'grant_id' THEN match_count ELSE 0 END) AS grant_id_count,
    SUM(CASE WHEN entity_type = 'funder_opportunity_id' THEN match_count ELSE 0 END) AS funder_opportunity_id_count,
    SUM(CASE WHEN entity_type = 'person_id' THEN match_count ELSE 0 END) AS person_id_count,
    SUM(CASE WHEN entity_type = 'funder_id' THEN match_count ELSE 0 END) AS funder_id_count,
    SUM(CASE WHEN entity_type = 'affiliation_id' THEN match_count ELSE 0 END) AS affiliation_id_count,
    SUM(CASE WHEN entity_type = 'person_name' THEN match_count ELSE 0 END) AS person_name_count,
    SUM(CASE WHEN entity_type = 'funder_name' THEN match_count ELSE 0 END) AS funder_name_count,
    SUM(CASE WHEN entity_type = 'affiliation_name' THEN match_count ELSE 0 END) AS affiliation_name_count,
    SUM(
      -- Treat grant_id and funder_opportunity_id the same
      -- If both are a match, then the maximum score of them combined is 100
      -- If only one field is a match, then the maximum score is also 100
      LEAST(
        IF(entity_type = 'grant_id', match_count * 100, 0) +
        IF(entity_type = 'funder_opportunity_id', match_count * 100, 0),
        100
      ) +
      IF(entity_type = 'person_id', match_count * 5, 0) +
      IF(entity_type = 'funder_id', match_count * 1, 0) +
      IF(entity_type = 'affiliation_id', match_count * 1, 0) +
      IF(entity_type = 'person_name', match_count * 5, 0) +
      IF(entity_type = 'funder_name', match_count * 1, 0) +
      IF(entity_type = 'affiliation_name', match_count * 1, 0)
    ) AS weighted_count
  FROM matches
  GROUP BY dmp_doi, match_doi
  ORDER BY dmp_doi, weighted_count DESC
)

SELECT
  dmp_doi,
  ARRAY_AGG(
    STRUCT(
      match_doi,
      grant_id_count,
      funder_opportunity_id_count,
      person_id_count,
      funder_id_count,
      affiliation_id_count,
      person_name_count,
      funder_name_count,
      affiliation_name_count,
      weighted_count
    ) ORDER BY weighted_count DESC LIMIT {{ max_matches }}
  ) AS matches
FROM aggregated
WHERE weighted_count >= {{ weighted_count_threshold }}
GROUP BY dmp_doi
ORDER BY dmp_doi
